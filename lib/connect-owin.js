var edge = require('edge'),
    urlParser = require('url');

var initialize = edge.func({
    assemblyFile: process.env.CONNECT_OWIN_NATIVE || (__dirname + '\\clr\\Connect.Owin.dll'),
    typeName: 'Connect.Owin.OwinMiddleware',
    methodName: 'Initialize'
});

var handle = edge.func({
    assemblyFile: process.env.CONNECT_OWIN_NATIVE || (__dirname + '\\clr\\Connect.Owin.dll'),
    typeName: 'Connect.Owin.OwinMiddleware',
    methodName: 'Handle'
});

// Returns OWIN middleware
module.exports = function (options) {
    if (typeof options === 'string') {
        options = { assemblyFile: options };
    }
    else if (typeof options != 'object') {
        throw new Error('Specify the file name of the OWIN assembly DLL or provide an options object.');
    }
    else if (typeof options.assemblyFile !== 'string') {
        throw new Error('OWIN assembly file name must be provided as a string parameter or assemblyFile options property.');
    }

    var owinAppId;

    var owinBodyParser = function (req, res, next) {
        if (req.body) return next();

        // Has body?
        if ('transfer-encoding' in req.headers ||
            ('content-length' in req.headers && req.headers['content-length'] !== '0')) {
            // Parse body 
            var buffers = [];
            req.on('data', function (d) { buffers.push(d); });
            req.on('end', function () {
                req.body = Buffer.concat(buffers);
                next();
            });
        }
        else {
            req.body = new Buffer(0);
            next();
        }
    };

    var owinMiddleware = function (req, res, next) {

        owinAppId !== undefined ? onInitialized() : ensureInitialized();

        function onInitialized() {
            // Create the baseline OWIN env using properties of the request object
            var env = {
                'connect-owin.appId': owinAppId,
                'owin.RequestMethod': req.method,
                'owin.RequestPath': urlParser.parse(req.url).pathname,
                'owin.RequestPathBase': '',
                'owin.RequestProtocol': 'HTTP/' + req.httpVersion,
                'owin.RequestQueryString': urlParser.parse(req.url).query || '',
                'owin.RequestScheme': req.connection.encrypted ? 'https' : 'http',
                'owin.RequestHeaders': req.headers
            };
            if (Buffer.isBuffer(req.body)) {
                // Fix marshalling of empty byte[]/Buffer
                // https://github.com/tjanczuk/edge/pull/69
                if (req.body.length > 0) {
                    env['owin.RequestBody'] = req.body;
                }
            }
            else if (typeof req.body === 'object') {
                env['owin.RequestBody'] = new Buffer(JSON.stringify(req.body));
            }
            else {
                var err = new Error('Invalid body format');
                err.status = 400;
                err.body = req.body;
                return next(err);
            }

            // Add options to the OWIN environement.
            // This is a good mechanism to export global node.js functions to the OWIN middleware in .NET.
            for (var i in options) {
                env['node.' + i] = options[i];
            }

            // Add per-request owin properties to the OWIN environment.
            // This is a good mechanism to allow previously running connect middleware 
            // to export request-specific node.js functions to the OWIN middleware in .NET.
            if (typeof req.owin === 'object') {
                for (var i in req.owin) {
                    env['node.' + i] = req.owin[i];
                }
            }

            // Call into .NET OWIN application
            handle(env, function (error, result) {
                if (error) return next(error);

                try {
                    // Consider this response complete or continue running connect pipeline?
                    var complete = !result['connect-owin.continue'];

                    // Add any response headers generated by the OWIN middleware
                    var headers = result['owin.ResponseHeaders'];
                    if (typeof headers === 'object') {
                        for (var i in headers) {
                            res.setHeader(i, headers[i].join(','));
                        }
                    }

                    // Set response status code if provided
                    // res.statusCode = 200 by default, as expected by OWIN specifications
                    var statusCode = result['owin.ResponseStatusCode'];
                    if (typeof statusCode === 'number') {
                        res.statusCode = statusCode;
                    }

                    // Write to response body
                    var body = result['owin.ResponseBody'];
                    if (Buffer.isBuffer(body)) {
                        res.write(body);
                    }

                    // Complete the response
                    if (complete) {
                        return res.end();
                    }
                }
                catch (e) {
                    return next(e);
                }

                // Continue running connect pipeline - OWIN middleware did not complete the response.
                return next();
            });
        }

        function ensureInitialized() {
            initialize(options, function (error, result) {
                if (error) return next(error);
                // Result is a unique identifier of the OWIN middleware in .NET.
                // It is passed to the handle method so that .NET code can dispatch the request
                // to the appropriate OWIN middleware instance.
                owinAppId = result;
                onInitialized();
            });
        }
    };

    return function (req, res, next) {
        owinBodyParser(req, res, function (err) {
            if (err) return next(err);
            owinMiddleware(req, res, next);
        });
    };
};

